name: Bandit Security Scan

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  contents: write

jobs:
  security-scan:
    name: Run Bandit Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit scan
        id: bandit_scan
        run: |
          bandit lowvuln.py --format json --output bandit-report.json || true
          CRITICAL_COUNT=$(grep -ic '"issue_severity": "HIGH"' bandit-report.json || echo 0)
          echo "Critical Count Found: $CRITICAL_COUNT"
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_ENV

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Debug Critical Count
        run: echo "Critical Count is ${{ env.critical_count }}"

      # Step 1: Block PR if Critical Vulnerabilities Found
      - name: Block Pull Request
        if: ${{ env.critical_count != '' && env.critical_count != '0' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Security Scan Failed**
            Critical vulnerabilities were found in `vuln.py`. PR is blocked.

      # Step 2: Fail Workflow if Critical Issues Exist
      - name: Fail Workflow if Critical Issues Exist
        if: ${{ env.critical_count != '' && env.critical_count != '0' }}
        run: exit 1

      # Step 3: Auto-Merge Pull Request if No Critical Vulnerabilities Found
      - name: Auto-Merge Pull Request
        if: ${{ env.critical_count == '0' }}
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

      # Step 4: Comment Success if No Critical Vulnerabilities Found
      - name: Successful Scan Comment
        if: ${{ env.critical_count == '0' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Security Scan Successful**
            No critical vulnerabilities were found in `vuln.py`. PR is approved.
